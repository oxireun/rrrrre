local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "raise a rainbocorn ", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local Tab = Window:MakeTab({

Name = "Main",

Icon = "rbxassetid://4483345998",

PremiumOnly = false

})

local Section = Tab:AddSection({

Name = "main"

})

-- Daily Claim

Tab:AddToggle({

Name = "daily claim",

Default = false,

Callback = function(Value)

    _G.DailyClaim = Value

    while _G.DailyClaim do

        local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent")

        for i = 1, 10000 do

            local args = {

                [1] = {

                    [1] = {

                        [1] = "\1",

                        [2] = "BERRIES_" .. i

                    },

                    [2] = "N"

                }

            }

            remoteEvent:FireServer(unpack(args))

            task.wait(0.1)

        end

        task.wait(1)

    end

end

})

-- Pet Hug

Tab:AddToggle({

Name = "pet hug",

Default = false,

Callback = function(Value)

    _G.PetHug = Value

    while _G.PetHug do

        local player = game.Players.LocalPlayer

        local folderName = player.Name .. ":Debris"

        local petFolder = workspace:FindFirstChild(folderName)

        if petFolder then

            for _, pet in ipairs(petFolder:GetChildren()) do

                if pet:IsA("Model") then

                    local args = {

                        [1] = {

                            [1] = "PetInteractAction",

                            [2] = "8",

                            [3] = {

                                [1] = "\1",

                                [2] = {

                                    [1] = pet.Name,

                                    [2] = "Hugged"

                                }

                            },

                            [4] = "-"

                        }

                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

                    task.wait(0.35)

                end

            end

        end

        task.wait(1)

    end

end

})

-- Pet Feed

Tab:AddToggle({

Name = "pet feed",

Default = false,

Callback = function(Value)

    _G.PetFeed = Value

    while _G.PetFeed do

        local player = game.Players.LocalPlayer

        local debrisFolder = workspace:FindFirstChild(player.Name..":Debris")

        if debrisFolder then

            for _, pet in ipairs(debrisFolder:GetChildren()) do

                if pet:IsA("Model") then

                    local args = {

                        [1] = {

                            [1] = "PetInteractAction",

                            [2] = "8",

                            [3] = {

                                [1] = "\1",

                                [2] = {

                                    [1] = pet.Name,

                                    [2] = "Fed"

                                }

                            },

                            [4] = "-"

                        }

                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

                    task.wait(0.25)

                end

            end

        end

        task.wait(1)

    end

end

})

-- Pet Clean

Tab:AddToggle({

Name = "pet clean",

Default = false,

Callback = function(Value)

    _G.PetClean = Value

    while _G.PetClean do

        local player = game.Players.LocalPlayer

        local debrisFolder = workspace:FindFirstChild(player.Name..":Debris")

        if debrisFolder then

            for _, pet in ipairs(debrisFolder:GetChildren()) do

                if pet:IsA("Model") then

                    local args = {

                        {

                            "PetInteractAction",

                            "8",

                            {

                                "\1",

                                {

                                    pet.Name,

                                    "Bathed"

                                }

                            },

                            "-"

                        }

                    }

                    game:GetService("ReplicatedStorage").dataRemoteEvent:FireServer(unpack(args))

                    task.wait(0.22)

                end

            end

        end

        task.wait(1)

    end

end

})

-- Anti-AFK Sistemi

local antiAFKEnabled = false

local antiAFKConnection = nil

local antiAFKGUI = nil

local function toggleAntiAFK()

    local player = game:GetService("Players").LocalPlayer

    local runService = game:GetService("RunService")

    if antiAFKEnabled then    

        -- Kapat    

        if antiAFKConnection then    

            antiAFKConnection:Disconnect()    

            antiAFKConnection = nil    

        end    

        if antiAFKGUI then    

            antiAFKGUI:Destroy()    

            antiAFKGUI = nil    

        end    

    else    

        -- Aç    

        antiAFKConnection = runService.Heartbeat:Connect(function()    

            if player.Character and player.Character:FindFirstChild("Humanoid") then    

                player.Character.Humanoid:Move(Vector3.new(0, 0, 0), true)    

            end    

        end)    

            

        -- GUI oluştur    

        antiAFKGUI = Instance.new("ScreenGui")    

        antiAFKGUI.Name = "AntiAFKIndicator"    

        antiAFKGUI.Parent = player:WaitForChild("PlayerGui")    

            

        local frame = Instance.new("Frame")    

        frame.Size = UDim2.new(0, 100, 0, 30)    

        frame.Position = UDim2.new(1, -110, 0, 10)    

        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)    

        frame.BorderSizePixel = 0    

        frame.Parent = antiAFKGUI    

            

        local label = Instance.new("TextLabel")    

        label.Size = UDim2.new(1, 0, 1, 0)    

        label.BackgroundTransparency = 1    

        label.Text = "Anti-AFK: ON"    

        label.TextColor3 = Color3.fromRGB(0, 255, 0)    

        label.Font = Enum.Font.SourceSansBold    

        label.TextSize = 16    

        label.Parent = frame    

    end    

        

    antiAFKEnabled = not antiAFKEnabled

end

Tab:AddButton({

Name = "anti afk",

Callback = function()

    toggleAntiAFK()

end

})

-- Diğer tab'lar aynı şekilde kalıyor...

local Tab = Window:MakeTab({

Name = "Teleport",

Icon = "rbxassetid://4483345998",

PremiumOnly = false

})

local Section = Tab:AddSection({

Name = "teleport"

})

Tab:AddButton({

Name = "Puppy corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(331.205841, 4.48058128, -70.2419434, 0.990852475, -5.42957501e-09, -0.134949669, 8.15323276e-09, 1, 1.96301038e-08, 0.134949669, -2.05508126e-08, 0.990852475)))

end

})

Tab:AddButton({

Name = "Adopta corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(318.167694, 4.22193432, -903.850281, 0.538577557, 4.0549974e-08, -0.842575967, 6.04684658e-08, 1, 8.67778525e-08, 0.842575967, -9.76858772e-08, 0.538577557)))

end

})

Tab:AddButton({

Name = "Bunny corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(-54.5959816, 17.0649471, -901.57074, 0.760864735, -3.66667692e-08, -0.648910522, 4.77762256e-08, 1, -4.86237384e-10, 0.648910522, -3.06325347e-08, 0.760864735)))

end

})

Tab:AddButton({

Name = "Eggzania",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(323.60321, 4.2328105, -658.681213, 0.999061108, 0, 0.0433234796, 0, 1, 0, -0.0433234796, 0, 0.999061108)))

end

})

Tab:AddButton({

Name = "Fairy corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(-309.632446, 4.73639488, -821.709534, 0.0709854811, -5.33095381e-08, 0.997477353, -4.19530046e-08, 1, 5.64299434e-08, -0.997477353, -4.58528788e-08, 0.0709854811)))

end

})

Tab:AddButton({

Name = "Kitty corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(-67.916214, 4.49305773, -506.850616, -0.741280556, 3.53892808e-08, 0.671195328, 1.43218699e-08, 1, -3.69084177e-08, -0.671195328, -1.77467214e-08, -0.741280556)))

end

})

Tab:AddButton({

Name = "Mama corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(334.421051, 62.6235352, 559.104553, -0.998810351, -4.07147316e-10, -0.0487629585, -4.44817694e-09, 1, 8.27623623e-08, 0.0487629585, 8.28808098e-08, -0.998810351)))

end

})

Tab:AddButton({

Name = "Mermaid corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(863.786682, 4.41513968, -935.472778, 0.0863056555, -2.62810484e-08, 0.99626869, 2.33456299e-09, 1, 2.61772382e-08, -0.99626869, 6.6608434e-11, 0.0863056555)))

end

})

Tab:AddButton({

Name = "Mini Mania",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(442.213745, 4.17698526, -1108.83252, -0.155657828, -1.54794133e-08, 0.987811029, 7.42309396e-08, 1, 2.73676246e-08, -0.987811029, 7.75861295e-08, -0.155657828)))

end

})

Tab:AddButton({

Name = "Monster corn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(-75.0714874, 6.55883646, -79.3479462, 0.0468450524, 6.1315184e-09, 0.998902142, -7.65466091e-09, 1, -5.77927972e-09, -0.998902142, -7.37552686e-09, 0.0468450524)))

end

})

Tab:AddButton({

Name = "Rainboville",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(323.090576, 7.50393867, -371.409821, 0.906486928, 1.43639776e-08, 0.42223385, -1.6893317e-08, 1, 2.24897456e-09, -0.42223385, -9.17159593e-09, 0.906486928)))

end

})

Tab:AddButton({

Name = "Sweetheart",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(667.665833, 4.28239632, -316.803802, -0.0463199839, -3.41103679e-08, -0.99892664, 1.72118035e-08, 1, -3.49451277e-08, 0.99892664, -1.88119866e-08, -0.0463199839)))

end

})

Tab:AddButton({

Name = "Unicorn",

Callback = function()

game.Players.LocalPlayer.Character:PivotTo(CFrame.new(Vector3.new(1233.29846, 158.095306, -263.227783, 0.283437282, -3.20920606e-08, -0.958990753, 1.12007061e-08, 1, -3.01539522e-08, 0.958990753, -2.19461871e-09, 0.283437282)))

end

})

local Tab = Window:MakeTab({

    Name = "Collect",

    Icon = "rbxassetid://4483345998",

    PremiumOnly = false

})

local Section = Tab:AddSection({

    Name = "collect"

})

-- Toggle'lar için çalışan scriptlerin kontrolü

local runningScripts = {}

Tab:AddToggle({

    Name = "chest",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.chest = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local activatorsFolder = workspace:WaitForChild("Activators")

                local teleportDelay = 1

                while runningScripts.chest and Value do

                    for _, chest in ipairs(activatorsFolder:GetChildren()) do

                        if not Value then break end

                        if chest.Name:lower():find("chest") then

                            local part = chest:FindFirstChild("Part")

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 3, 0)))

                                wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    wait(teleportDelay)

                                end

                            end

                        end

                    end

                    wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.chest)

        else

            if runningScripts.chest then

                coroutine.close(runningScripts.chest)

                runningScripts.chest = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "flower",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.flower = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local activatorsFolder = workspace:WaitForChild("Activators")

                local teleportDelay = 0.2

                while runningScripts.flower and Value do

                    for _, flower in ipairs(activatorsFolder:GetChildren()) do

                        if not Value then break end

                        if flower.Name:lower():find("flower") then

                            local part = flower:FindFirstChild("Part") or flower:FindFirstChildWhichIsA("BasePart")

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 3, 0)))

                                wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    wait(teleportDelay)

                                end

                            end

                        end

                    end

                    wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.flower)

        else

            if runningScripts.flower then

                coroutine.close(runningScripts.flower)

                runningScripts.flower = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "rattle",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.rattle = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local rattlesFolder = workspace:WaitForChild("Collectibles"):WaitForChild("BabyRattles")

                local teleportDelay = 1

                while runningScripts.rattle and Value do

                    for _, rattle in ipairs(rattlesFolder:GetChildren()) do

                        if not Value then break end

                        if rattle.Name:lower():find("rattle") then

                            local part = rattle:FindFirstChild("Part") or rattle:FindFirstChildWhichIsA("BasePart") or rattle.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 3, 0)))

                                wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    wait(teleportDelay)

                                end

                            end

                        end

                    end

                    wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.rattle)

        else

            if runningScripts.rattle then

                coroutine.close(runningScripts.rattle)

                runningScripts.rattle = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "book",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.book = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local booksFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Books")

                local teleportDelay = 1

                while runningScripts.book and Value do

                    for _, book in ipairs(booksFolder:GetChildren()) do

                        if not Value then break end

                        if book.Name:lower():find("book") then

                            local part = book:FindFirstChild("Part") or book:FindFirstChildWhichIsA("BasePart") or book.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 3, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(teleportDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.book)

        else

            if runningScripts.book then

                coroutine.close(runningScripts.book)

                runningScripts.book = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "cake",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.cake = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local cakesFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Cakes")

                local teleportDelay = 1

                while runningScripts.cake and Value do

                    for _, cake in ipairs(cakesFolder:GetChildren()) do

                        if not Value then break end

                        if cake.Name:lower():find("cake") then

                            local part = cake:FindFirstChild("InteractionPart") or cake:FindFirstChild("Part") or cake:FindFirstChildWhichIsA("BasePart") or cake.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 3, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(teleportDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.cake)

        else

            if runningScripts.cake then

                coroutine.close(runningScripts.cake)

                runningScripts.cake = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "orb",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.orb = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local orbsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Orbs")

                local teleportDelay = 1

                while runningScripts.orb and Value do

                    for _, orb in ipairs(orbsFolder:GetChildren()) do

                        if not Value then break end

                        if orb.Name:lower():find("orb") then

                            local part = orb:FindFirstChild("Trigger") or orb:FindFirstChild("InteractionPart") or orb:FindFirstChild("Part") or orb:FindFirstChildWhichIsA("BasePart") or orb.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 2, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(teleportDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.orb)

        else

            if runningScripts.orb then

                coroutine.close(runningScripts.orb)

                runningScripts.orb = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "pumpkin",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.pumpkin = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local pumpkinsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Pumpkins")

                local teleportDelay = 1

                while runningScripts.pumpkin and Value do

                    for _, pumpkin in ipairs(pumpkinsFolder:GetChildren()) do

                        if not Value then break end

                        if pumpkin.Name:lower():find("pumpkin") then

                            local part = pumpkin:FindFirstChild("Hitbox") or pumpkin:FindFirstChild("InteractionPart") or pumpkin:FindFirstChild("Part") or pumpkin:FindFirstChildWhichIsA("BasePart") or pumpkin.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 4, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(teleportDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.pumpkin)

        else

            if runningScripts.pumpkin then

                coroutine.close(runningScripts.pumpkin)

                runningScripts.pumpkin = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "rainbow snack",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.rainbowsnack = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local snacksFolder = workspace:WaitForChild("Collectibles"):WaitForChild("RainbowSnacks")

                local teleportDelay = 1

                while runningScripts.rainbowsnack and Value do

                    for _, snack in ipairs(snacksFolder:GetChildren()) do

                        if not Value then break end

                        if snack.Name:lower():find("rainbowsnack") then

                            local part = snack:FindFirstChild("InteractPart") or snack:FindFirstChild("Trigger") or snack:FindFirstChild("Hitbox") or snack:FindFirstChildWhichIsA("BasePart") or snack.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 2.5, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(teleportDelay)

                                    task.wait(0.5)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.rainbowsnack)

        else

            if runningScripts.rainbowsnack then

                coroutine.close(runningScripts.rainbowsnack)

                runningScripts.rainbowsnack = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "rainbow star",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.rainbowstar = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local starsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("RainbowStars")

                local teleportDelay = 1

                local collectionDelay = 0.7

                while runningScripts.rainbowstar and Value do

                    for _, star in ipairs(starsFolder:GetChildren()) do

                        if not Value then break end

                        if star.Name:lower():find("rainbowstar") then

                            local part = star:FindFirstChild("StarCore") or star:FindFirstChild("GlowPart") or star:FindFirstChild("Center") or star:FindFirstChildWhichIsA("BasePart") or star.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 2.2, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(collectionDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.rainbowstar)

        else

            if runningScripts.rainbowstar then

                coroutine.close(runningScripts.rainbowstar)

                runningScripts.rainbowstar = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "shard",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.shard = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local shardsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Shards")

                local teleportDelay = 0.8

                local collectDelay = 0.5

                while runningScripts.shard and Value do

                    for _, shard in ipairs(shardsFolder:GetChildren()) do

                        if not Value then break end

                        if shard.Name:lower():find("shard") then

                            local part = shard:FindFirstChild("Crystal") or shard:FindFirstChild("ShardCore") or shard:FindFirstChild("Gem") or shard:FindFirstChildWhichIsA("BasePart", true) or shard.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 1.8, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    fireproximityprompt(prompt)

                                    task.wait(0.1)

                                    fireproximityprompt(prompt)

                                    task.wait(collectDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.shard)

        else

            if runningScripts.shard then

                coroutine.close(runningScripts.shard)

                runningScripts.shard = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "treat",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.treat = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local treatsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Treats")

                local teleportDelay = 0.7

                local collectDelay = 0.4

                while runningScripts.treat and Value do

                    for _, treat in ipairs(treatsFolder:GetChildren()) do

                        if not Value then break end

                        if treat.Name:lower():find("treat") then

                            local part = treat:FindFirstChild("TreatMesh") or treat:FindFirstChild("Wrapper") or treat:FindFirstChild("PickupPart") or treat:FindFirstChildWhichIsA("BasePart", true) or treat.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 1.5, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    for i = 1, 3 do

                                        fireproximityprompt(prompt)

                                        task.wait(0.05)

                                    end

                                    task.wait(collectDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.treat)

        else

            if runningScripts.treat then

                coroutine.close(runningScripts.treat)

                runningScripts.treat = nil

            end

        end

    end

})

Tab:AddToggle({

    Name = "yarn",

    Default = false,

    Callback = function(Value)

        if Value then

            runningScripts.yarn = coroutine.create(function()

                local player = game.Players.LocalPlayer

                local character = player.Character or player.CharacterAdded:Wait()

                local humanoid = character:WaitForChild("Humanoid")

                local yarnsFolder = workspace:WaitForChild("Collectibles"):WaitForChild("Yarns")

                local teleportDelay = 0.6

                local collectDelay = 0.3

                while runningScripts.yarn and Value do

                    for _, yarn in ipairs(yarnsFolder:GetChildren()) do

                        if not Value then break end

                        if yarn.Name:lower():find("yarn") then

                            local part = yarn:FindFirstChild("YarnBall") or yarn:FindFirstChild("String") or yarn:FindFirstChild("Knot") or yarn:FindFirstChildWhichIsA("BasePart", true) or yarn.PrimaryPart

                            if part then

                                local prompt = part:FindFirstChildOfClass("ProximityPrompt")

                                character:SetPrimaryPartCFrame(CFrame.new(part.Position + Vector3.new(0, 1.2, 0)))

                                task.wait(teleportDelay)

                                if prompt then

                                    for i = 1, 2 do

                                        fireproximityprompt(prompt)

                                        task.wait(0.1)

                                    end

                                    task.wait(collectDelay)

                                end

                            end

                        end

                    end

                    task.wait(0.1)

                end

            end)

            coroutine.resume(runningScripts.yarn)

        else

            if runningScripts.yarn then

                coroutine.close(runningScripts.yarn)

                runningScripts.yarn = nil

            end

        end

    end

})

 

local Tab = Window:MakeTab({

Name = "hatch egg",

Icon = "rbxassetid://4483345998",

PremiumOnly = false

})

local Section = Tab:AddSection({

Name = "hatch egg"

})

-- Puppycorn egg

Tab:AddToggle({

Name = "Puppycorn egg",

Default = false,

Callback = function(Value)

    _G.puppycornEgg = Value

    while _G.puppycornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "277B08AE-E6C3-4353-88D2-1DAD80F30710"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Adoptacorn egg

Tab:AddToggle({

Name = "Adoptacorn egg",

Default = false,

Callback = function(Value)

    _G.adoptacornEgg = Value

    while _G.adoptacornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "07253759-7dc8-40c6-a6aa-537a255c6bdb"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Bunnycorn egg

Tab:AddToggle({

Name = "Bunnycorn egg",

Default = false,

Callback = function(Value)

    _G.bunnycornEgg = Value

    while _G.bunnycornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "7bae0888-afc2-44ad-ba91-ba4c0b64645f"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Kittycorn egg

Tab:AddToggle({

Name = "Kittycorn egg",

Default = false,

Callback = function(Value)

    _G.kittycornEgg = Value

    while _G.kittycornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "B534165D-8DB4-472C-8644-598B17FC5C7C"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Fairycorn egg

Tab:AddToggle({

Name = "Fairycorn egg",

Default = false,

Callback = function(Value)

    _G.fairycornEgg = Value

    while _G.fairycornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "A53BFFCC-44C4-4A4B-9DE8-6DF9DF0CD872"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Mermaidcorn egg

Tab:AddToggle({

Name = "mermaidocorn egg",

Default = false,

Callback = function(Value)

    _G.mermaidcornEgg = Value

    while _G.mermaidcornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "2D4C01A6-B2AD-490C-81E9-DB0CE3DC00B8"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- MiniMania egg

Tab:AddToggle({

Name = "MiniMania egg",

Default = false,

Callback = function(Value)

    _G.minimaniaEgg = Value

    while _G.minimaniaEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "8432839a-49c7-4c75-8208-bb32ffa21054"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Monstercorn egg

Tab:AddToggle({

Name = "Monstercorn egg",

Default = false,

Callback = function(Value)

    _G.monstercornEgg = Value

    while _G.monstercornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "5A6E5306-BD15-4903-914C-68316F5398E4"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Rainboville egg

Tab:AddToggle({

Name = "Rainboville egg",

Default = false,

Callback = function(Value)

    _G.rainbovilleEgg = Value

    while _G.rainbovilleEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "AC961F4A-9780-4C73-8813-99A67E501E55"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Sweetheart egg

Tab:AddToggle({

Name = "Sweetheart egg",

Default = false,

Callback = function(Value)

    _G.sweetheartEgg = Value

    while _G.sweetheartEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "E598ECF8-243A-4ADB-AA13-BA784D1BBF6B"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

-- Unicorn egg

Tab:AddToggle({

Name = "Unicorn egg",

Default = false,

Callback = function(Value)

    _G.unicornEgg = Value

    while _G.unicornEgg do

        local args = {

            [1] = {

                [1] = {

                    [1] = "\1",

                    [2] = {

                        ["PurchaserGUID"] = "56c376f7-d413-4ffa-b5c0-bdedf1b31262"

                    }

                },

                [2] = "]"

            }

        }

        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))

        wait(3)

    end

end

})

local Tab = Window:MakeTab({

Name = "credit owner",

Icon = "rbxassetid://4483345998",

PremiumOnly = false

})

local Section = Tab:AddSection({

Name = "oxireun"

})

Tab:AddButton({

Name = "copy yt",

Callback = function()

    setclipboard("https://youtube.com/@oxireun?si=dnaRt4zcDvmnrUu_")

    game.StarterGui:SetCore("SendNotification", {

        Title = "Copied!",

        Text = "YouTube link copied to clipboard!",

        Duration = 2,

    })

end

})

Tab:AddButton({

Name = "copy dc",

Callback = function()

    setclipboard("https://discord.gg/M2Xq55wC8Z")

    game.StarterGui:SetCore("SendNotification", {

        Title = "Copied!",

        Text = "Discord invite copied to clipboard!",

        Duration = 2,

    })

end

})
